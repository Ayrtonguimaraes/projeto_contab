"""
P√°gina de Indicadores Gerais Consolidada
"""

import streamlit as st
from pages.base_page import BasePage
import pandas as pd

class IndicadoresGeraisPage(BasePage):
    """Mostra tabela consolidada de todos os indicadores com varia√ß√µes."""

    def render(self):
        st.title("üìã Indicadores Gerais")
        st.caption("Vis√£o tabular consolidada de todos os indicadores financeiros e operacionais com varia√ß√£o ano a ano.")
        st.markdown("---")

        tabela = self.analyzer.get_indicadores_tabela()
        if tabela.empty:
            st.info("Necess√°rio pelo menos 2 anos para calcular varia√ß√µes.")
            return

        # Formata√ß√£o
        df_display = tabela.copy()
        # Definir quais indicadores s√£o percentuais (heur√≠stica por presen√ßa de 'Liquidez', 'Rentabilidade', 'Margem', 'Giro', 'Alavancagem', 'Grau', 'ROA', 'ROE', '%', 'MAF')
        percent_keywords = [
            'Liquidez', 'Rentabilidade', 'Margem', 'Giro', 'Alavancagem', 'Grau', 'ROA', 'ROE', 'MAF', 'PCT'
        ]

        def _is_percent(ind):
            return any(k in ind for k in percent_keywords)

        def fmt_val(indicador, v):
            if v is None:
                return '‚Äî'
            try:
                if _is_percent(indicador):
                    return f"{v:.2%}" if v <= 1.5 else f"{v:.2f}"  # heur√≠stica (valores j√° percentuais vs √≠ndice >1)
                return f"{v:,.0f}".replace(',', '.')
            except Exception:
                return v

        # Aplicar formata√ß√£o
        df_display['Ano Anterior'] = df_display.apply(lambda r: fmt_val(r['Indicador'], r['Ano Anterior']), axis=1)
        df_display['Ano Atual'] = df_display.apply(lambda r: fmt_val(r['Indicador'], r['Ano Atual']), axis=1)
        df_display['Varia√ß√£o Abs'] = df_display.apply(lambda r: fmt_val(r['Indicador'], r['Varia√ß√£o Abs']), axis=1)
        df_display['Varia√ß√£o %'] = df_display['Varia√ß√£o %'].apply(lambda v: '‚Äî' if v is None else f"{v:.1f}%")

        st.subheader("üßÆ Tabela Consolidada")
        st.dataframe(df_display, use_container_width=True, hide_index=True)

        # Destaques autom√°ticos
        st.markdown("### üîé Destaques Autom√°ticos")
        top_var = tabela.sort_values('Varia√ß√£o %', ascending=False).head(3)
        worst_var = tabela.sort_values('Varia√ß√£o %', ascending=True).head(3)
        col1, col2 = st.columns(2)
        with col1:
            st.write("**Maiores Altas (%):**")
            for _, row in top_var.iterrows():
                if row['Varia√ß√£o %'] is not None:
                    st.markdown(f"‚úÖ {row['Indicador']}: **{row['Varia√ß√£o %']:.1f}%**")
        with col2:
            st.write("**Maiores Quedas (%):**")
            for _, row in worst_var.iterrows():
                if row['Varia√ß√£o %'] is not None:
                    st.markdown(f"üîª {row['Indicador']}: **{row['Varia√ß√£o %']:.1f}%**")

        # Integra√ß√£o opcional com IA
        with st.expander("ü§ñ Analisar Tabela com IA"):
            st.write("Gera contexto estruturado para perguntas no Chat com IA.")
            if st.button("üì® Enviar para Chat IA"):
                # Armazena tabela serializada no session_state
                st.session_state.ai_indicadores_context = tabela.to_dict('records')
                st.success("Contexto armazenado. Abra 'Chat com IA' e pergunte usando este conjunto.")

        self.render_sidebar_info()

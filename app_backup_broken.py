"""
Dashboard de An√°lise Financeira Corporativa - Aplica√ß√£o Principal
Vers√£o modularizada com arquitetura limpa
"""

import streamlit as st
from financial_analyzer import FinancialAnalyzer
from config.settings import AppConfig
from utils.data_loader import carregar_dados
from pages.page_manager import PageManager

# Configura√ß√£o da p√°gina usando m√≥dulo centralizado
AppConfig.configure_page()

def main():
    """Fun√ß√£o principal da aplica√ß√£o"""
    # Inicializar dados e analyzer
    if 'df_original' not in st.session_state:
        st.session_state.df_original = carregar_dados()
        st.session_state.financial_analyzer = FinancialAnalyzer(st.session_state.df_original.copy())
    
    # Criar navega√ß√£o
    st.sidebar.title("üß≠ Navega√ß√£o")
    
    # Usar configura√ß√£o centralizada para navega√ß√£o
    paginas = AppConfig.NAVIGATION
    
    pagina_selecionada = st.sidebar.radio(
        "Selecione a an√°lise:",
        list(paginas.keys())
    )
    
    # Obter dados e analyzer
    df = st.session_state.df_original
    financial_analyzer = st.session_state.financial_analyzer
    
    # Criar sidebar com informa√ß√µes (ser√° movido para cada p√°gina)
    criar_sidebar(df, financial_analyzer)
    
    # Inicializar gerenciador de p√°ginas
    page_manager = PageManager()
    
    # Renderizar p√°gina selecionada usando o gerenciador
    page_key = AppConfig.get_page_value(pagina_selecionada)
    page_manager.render_page(page_key, df, financial_analyzer)

# Executar a aplica√ß√£o
if __name__ == "__main__":
    main()
    """
    Cria a barra lateral com informa√ß√µes da empresa e filtros
    """
    st.sidebar.title("üè¢ An√°lise Financeira")
    
    # Informa√ß√µes gerais
    st.sidebar.subheader("üìä Resumo Executivo")
    
    anos_disponiveis = sorted(df['Ano'].unique(), reverse=True)
    ano_selecionado = st.sidebar.selectbox("Selecione o Ano para An√°lise:", anos_disponiveis)
    
    # KPIs do ano selecionado
    dados_ano = df[df['Ano'] == ano_selecionado].iloc[0]
    
    # Fun√ß√£o auxiliar para formatar valores monet√°rios de forma segura
    def format_currency(value):
        try:
            # Converter para float se necess√°rio
            if isinstance(value, str):
                value = float(value.replace('.', '').replace(',', '.'))
            return f"R$ {float(value):,.0f}".replace(',', '.')
        except:
            return f"R$ {value}"
    
    # Fun√ß√£o auxiliar para formatar percentuais de forma segura
    def format_percentage(value):
        try:
            if isinstance(value, str):
                value = float(value.replace(',', '.'))
            return f"{float(value):.1%}"
        except:
            return f"{value}"
    
    # Fun√ß√£o auxiliar para formatar n√∫meros decimais de forma segura
    def format_decimal(value):
        try:
            if isinstance(value, str):
                value = float(value.replace(',', '.'))
            return f"{float(value):.2f}"
        except:
            return f"{value}"
    
    st.sidebar.metric(
        "ÔøΩ Receita L√≠quida", 
        format_currency(dados_ano['Receita L√≠quida'])
    )
    
    st.sidebar.metric(
        "üíé Lucro L√≠quido", 
        format_currency(dados_ano['Lucro L√≠quido'])
    )
    
    st.sidebar.metric(
        "üìà ROE", 
        format_percentage(dados_ano['Rentabilidade do Patrim√¥nio L√≠quido (ROE) '])
    )
    
    st.sidebar.metric(
        "üéØ ROA", 
        format_percentage(dados_ano['Rentabilidade do Ativo (ROA ou ROI)'])
    )
    
    st.sidebar.metric(
        "üõ°Ô∏è Liquidez Corrente", 
        format_decimal(dados_ano['Liquidez Corrente (LC) '])
    )
    
    # Indicadores de alerta
    st.sidebar.subheader("üö® Indicadores de Aten√ß√£o")
    
    # Converter valores para float de forma segura
    try:
        liquidez = float(dados_ano['Liquidez Corrente (LC) ']) if isinstance(dados_ano['Liquidez Corrente (LC) '], str) else dados_ano['Liquidez Corrente (LC) ']
    except:
        liquidez = 0
    
    try:
        endividamento = float(dados_ano['Endividamento Geral (EG)']) if isinstance(dados_ano['Endividamento Geral (EG)'], str) else dados_ano['Endividamento Geral (EG)']
    except:
        endividamento = 0
    
    if liquidez < 1.0:
        st.sidebar.error(f"‚ö†Ô∏è Liquidez Corrente baixa: {liquidez:.2f}")
    elif liquidez < 1.5:
        st.sidebar.warning(f"‚ö° Liquidez Corrente moderada: {liquidez:.2f}")
    else:
        st.sidebar.success(f"‚úÖ Liquidez Corrente saud√°vel: {liquidez:.2f}")
    
    if endividamento > 0.7:
        st.sidebar.error(f"‚ö†Ô∏è Alto endividamento: {endividamento:.1%}")
    elif endividamento > 0.5:
        st.sidebar.warning(f"‚ö° Endividamento moderado: {endividamento:.1%}")
    else:
        st.sidebar.success(f"‚úÖ Endividamento controlado: {endividamento:.1%}")
    
    return ano_selecionado

# Fun√ß√£o para aplicar filtros aos dados
def aplicar_filtros(df, data_inicio, data_fim, tipos, categorias):
    """
    Aplica os filtros selecionados ao DataFrame
    """
    df_filtrado = df.copy()
    
    # Filtro por per√≠odo
    df_filtrado = df_filtrado[
        (df_filtrado['Data'].dt.date >= data_inicio) &
        (df_filtrado['Data'].dt.date <= data_fim)
    ]
    
    # Filtro por tipo
    if tipos:
        df_filtrado = df_filtrado[df_filtrado['Tipo'].isin(tipos)]
    
    # Filtro por categoria
    if categorias:
        df_filtrado = df_filtrado[df_filtrado['Categoria'].isin(categorias)]
    
    return df_filtrado

# Fun√ß√£o para calcular KPIs
def calcular_kpis(df_filtrado):
    """
    Calcula os KPIs principais
    """
    receita_total = df_filtrado[df_filtrado['Tipo'] == 'Receita']['Valor'].sum()
    despesa_total = df_filtrado[df_filtrado['Tipo'] == 'Despesa']['Valor'].sum()
    saldo = receita_total - despesa_total
    
    return {
        'receita_total': receita_total,
        'despesa_total': despesa_total,
        'saldo': saldo
    }

# Fun√ß√£o para exibir KPIs
def exibir_kpis(df_filtrado):
    """
    Exibe os KPIs principais
    """
    col1, col2, col3 = st.columns(3)
    
    with col1:
        receita_total = df_filtrado[df_filtrado['Tipo'] == 'Receita']['Valor'].sum()
        st.metric(
            label="Receita Total",
            value=f"R$ {receita_total:,.2f}",
            delta=None
        )
    
    with col2:
        despesa_total = df_filtrado[df_filtrado['Tipo'] == 'Despesa']['Valor'].sum()
        st.metric(
            label="Despesa Total",
            value=f"R$ {despesa_total:,.2f}",
            delta=None
        )
    
    with col3:
        saldo = receita_total - despesa_total
        delta_saldo = saldo if saldo != 0 else None
        st.metric(
            label="Saldo (Lucro/Preju√≠zo)",
            value=f"R$ {saldo:,.2f}",
            delta=delta_saldo
        )

# Fun√ß√£o principal do dashboard
def main():
    """
    Fun√ß√£o principal que orquestra todo o dashboard com navega√ß√£o por p√°ginas
    """
    # Inicializar dados financeiros
    if 'df_original' not in st.session_state:
        st.session_state.df_original = carregar_dados_financeiros()
        st.session_state.financial_analyzer = FinancialAnalyzer(st.session_state.df_original.copy())
    
    # Criar navega√ß√£o
    st.sidebar.title("üß≠ Navega√ß√£o")
    
    paginas = {
        "üìä Dashboard Executivo": "dashboard",
        "üìà An√°lise de Rentabilidade": "rentabilidade", 
        "üõ°Ô∏è An√°lise de Liquidez": "liquidez",
        "üè¶ Estrutura de Capital": "capital",
        "‚è±Ô∏è Ciclo Financeiro": "ciclo",
        "ÔøΩ An√°lise DuPont": "dupont",
        "üå°Ô∏è Vis√£o Geral (Heatmap)": "heatmap",
        "ü§ñ Chat com IA": "ai_chat"
    }
    
    pagina_selecionada = st.sidebar.radio(
        "Selecione a an√°lise:",
        list(paginas.keys())
    )
    
    # Obter dados e analyzer
    df = st.session_state.df_original
    financial_analyzer = st.session_state.financial_analyzer
    
    # Criar sidebar com informa√ß√µes
    ano_selecionado = criar_sidebar(df, financial_analyzer)
    
    # Renderizar p√°gina selecionada
    if paginas[pagina_selecionada] == "dashboard":
        render_dashboard_executivo(df, financial_analyzer)
    elif paginas[pagina_selecionada] == "rentabilidade":
        render_analise_rentabilidade(df, financial_analyzer)
    elif paginas[pagina_selecionada] == "liquidez":
        render_analise_liquidez(df, financial_analyzer)
    elif paginas[pagina_selecionada] == "capital":
        render_estrutura_capital(df, financial_analyzer)
    elif paginas[pagina_selecionada] == "ciclo":
        render_ciclo_financeiro(df, financial_analyzer)
    elif paginas[pagina_selecionada] == "dupont":
        render_analise_dupont(df, financial_analyzer)
    elif paginas[pagina_selecionada] == "heatmap":
        render_visao_geral(df, financial_analyzer)
    elif paginas[pagina_selecionada] == "ai_chat":
        render_ai_chat_page_financial(df, financial_analyzer)

def render_dashboard_executivo(df, financial_analyzer):
    """
    Dashboard Executivo com KPIs principais
    """
    st.title("üìä Dashboard Executivo - An√°lise Financeira")
    st.markdown("---")
    
    # KPIs principais
    kpis = financial_analyzer.get_kpis_principais()
    
    st.subheader("üìà KPIs Principais")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric(
            "üí∞ Receita L√≠quida", 
            f"R$ {kpis['receita_liquida']['atual']:,.0f}".replace(',', '.'),
            f"{kpis['receita_liquida']['variacao']:+.1f}%"
        )
        
        st.metric(
            "üìà ROE", 
            f"{kpis['roe']['atual']:.1%}",
            f"{kpis['roe']['variacao']:+.1f}pp"
        )
    
    with col2:
        st.metric(
            "ÔøΩ Lucro L√≠quido", 
            f"R$ {kpis['lucro_liquido']['atual']:,.0f}".replace(',', '.'),
            f"{kpis['lucro_liquido']['variacao']:+.1f}%"
        )
        
        st.metric(
            "üéØ ROA", 
            f"{kpis['roa']['atual']:.1%}",
            f"{kpis['roa']['variacao']:+.1f}pp"
        )
    
    with col3:
        st.metric(
            "üíß Margem L√≠quida", 
            f"{kpis['margem_liquida']['atual']:.1%}",
            f"{kpis['margem_liquida']['variacao']:+.1f}pp"
        )
        
        st.metric(
            "üõ°Ô∏è Liquidez Corrente", 
            f"{kpis['liquidez_corrente']['atual']:.2f}",
            f"{kpis['liquidez_corrente']['variacao']:+.1f}%"
        )
    
    st.markdown("---")
    
    # Gr√°fico de evolu√ß√£o patrimonial
    st.subheader("üí∞ Evolu√ß√£o Patrimonial")
    fig_evolucao = financial_analyzer.create_evolucao_patrimonial()
    st.plotly_chart(fig_evolucao, use_container_width=True)
    
    # An√°lise de rentabilidade resumida
    st.subheader("üìà Vis√£o Geral da Rentabilidade")
    fig_rent = financial_analyzer.create_rentabilidade_chart()
    st.plotly_chart(fig_rent, use_container_width=True)

def render_analise_rentabilidade(df, financial_analyzer):
    """
    P√°gina especializada em an√°lise de rentabilidade
    """
    st.title("üìà An√°lise de Rentabilidade")
    st.markdown("---")
    
    # Descri√ß√£o
    st.markdown("""
    ### üéØ **Indicadores de Rentabilidade**
    
    - **ROE (Return on Equity)**: Retorno sobre o Patrim√¥nio L√≠quido
    - **ROA (Return on Assets)**: Retorno sobre os Ativos
    - **Margem L√≠quida**: Percentual do lucro em rela√ß√£o √† receita
    """)
    
    # Gr√°fico principal de rentabilidade
    fig = financial_analyzer.create_rentabilidade_chart()
    st.plotly_chart(fig, use_container_width=True)
    
    # An√°lise textual
    anos = df['Ano'].tolist()
    if len(anos) >= 2:
        ano_atual = max(anos)
        ano_anterior = min(anos)
        
        dados_atual = df[df['Ano'] == ano_atual].iloc[0]
        dados_anterior = df[df['Ano'] == ano_anterior].iloc[0]
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader(f"üìä An√°lise {ano_atual}")
            st.write(f"**ROE:** {dados_atual['Rentabilidade do Patrim√¥nio L√≠quido (ROE) ']:.1%}")
            st.write(f"**ROA:** {dados_atual['Rentabilidade do Ativo (ROA ou ROI)']:.1%}")
            st.write(f"**Margem L√≠quida:** {dados_atual['Margem L√≠quida (ML)']:.1%}")
        
        with col2:
            st.subheader(f"üìâ Varia√ß√£o vs {ano_anterior}")
            roe_var = dados_atual['Rentabilidade do Patrim√¥nio L√≠quido (ROE) '] - dados_anterior['Rentabilidade do Patrim√¥nio L√≠quido (ROE) ']
            roa_var = dados_atual['Rentabilidade do Ativo (ROA ou ROI)'] - dados_anterior['Rentabilidade do Ativo (ROA ou ROI)']
            ml_var = dados_atual['Margem L√≠quida (ML)'] - dados_anterior['Margem L√≠quida (ML)']
            
            st.write(f"**ROE:** {roe_var:+.1f}pp")
            st.write(f"**ROA:** {roa_var:+.1f}pp")
            st.write(f"**Margem L√≠quida:** {ml_var:+.1f}pp")

def render_analise_liquidez(df, financial_analyzer):
    """
    P√°gina especializada em an√°lise de liquidez
    """
    st.title("üõ°Ô∏è An√°lise de Liquidez")
    st.markdown("---")
    
    # Descri√ß√£o
    st.markdown("""
    ### üíß **Indicadores de Liquidez**
    
    - **Liquidez Geral (LG)**: Capacidade de pagamento de todas as obriga√ß√µes
    - **Liquidez Corrente (LC)**: Capacidade de pagamento de obriga√ß√µes de curto prazo
    - **Liquidez Seca (LS)**: Liquidez corrente excluindo estoques
    - **Liquidez Imediata (LI)**: Capacidade de pagamento imediato
    """)
    
    # Gr√°fico radar de liquidez
    fig = financial_analyzer.create_liquidez_radar()
    st.plotly_chart(fig, use_container_width=True)
    
    # Tabela com valores
    st.subheader("üìã Valores dos Indicadores")
    liquidez_cols = ['Ano', 'Liquidez Geral (LG)', 'Liquidez Corrente (LC) ', 'Liquidez Seca (LS)', 'Liquidez Imediata (LI)']
    df_liquidez = df[liquidez_cols].round(3)
    st.dataframe(df_liquidez, use_container_width=True)
    
    # Interpreta√ß√£o
    st.subheader("üîç Interpreta√ß√£o")
    ano_atual = df['Ano'].max()
    dados_atual = df[df['Ano'] == ano_atual].iloc[0]
    
    lc = dados_atual['Liquidez Corrente (LC) ']
    
    if lc >= 1.5:
        st.success(f"‚úÖ **Liquidez Corrente Excelente:** {lc:.2f} - Empresa possui boa capacidade de pagamento")
    elif lc >= 1.0:
        st.warning(f"‚ö° **Liquidez Corrente Adequada:** {lc:.2f} - Situa√ß√£o controlada, mas merece aten√ß√£o")
    else:
        st.error(f"‚ö†Ô∏è **Liquidez Corrente Cr√≠tica:** {lc:.2f} - Dificuldades para honrar compromissos de curto prazo")

def render_estrutura_capital(df, financial_analyzer):
    """
    P√°gina especializada em estrutura de capital
    """
    st.title("üè¶ An√°lise da Estrutura de Capital")
    st.markdown("---")
    
    # Descri√ß√£o
    st.markdown("""
    ### üèóÔ∏è **Indicadores de Endividamento**
    
    - **Endividamento Geral (EG)**: Propor√ß√£o de recursos de terceiros
    - **Participa√ß√£o de Terceiros (PCT)**: Grau de depend√™ncia de capital de terceiros
    - **Composi√ß√£o do Endividamento (CE)**: Concentra√ß√£o das d√≠vidas no curto prazo
    """)
    
    # Gr√°fico de estrutura de capital
    fig = financial_analyzer.create_estrutura_capital()
    st.plotly_chart(fig, use_container_width=True)
    
    # An√°lise da estrutura atual
    st.subheader("üìä An√°lise da Estrutura Atual")
    ano_atual = df['Ano'].max()
    dados = df[df['Ano'] == ano_atual].iloc[0]
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.metric("üè¶ Endividamento Geral", f"{dados['Endividamento Geral (EG)']:.1%}")
        st.metric("üë• Participa√ß√£o de Terceiros", f"{dados['Participa√ß√£o de Capitais de Terceiros (PCT) ‚Äì Grau de Endividamento']:.2f}")
    
    with col2:
        st.metric("‚è±Ô∏è Composi√ß√£o do Endividamento", f"{dados['Composi√ß√£o do Endividamento (CE)']:.1%}")
        
        # Interpreta√ß√£o do endividamento
        eg = dados['Endividamento Geral (EG)']
        if eg > 0.7:
            st.error("‚ö†Ô∏è Alto n√≠vel de endividamento")
        elif eg > 0.5:
            st.warning("‚ö° Endividamento moderado")
        else:
            st.success("‚úÖ Endividamento controlado")

def render_ciclo_financeiro(df, financial_analyzer):
    """
    P√°gina especializada em ciclo financeiro
    """
    st.title("‚è±Ô∏è An√°lise do Ciclo Operacional e Financeiro")
    st.markdown("---")
    
    # Descri√ß√£o
    st.markdown("""
    ### üîÑ **Prazos M√©dios e Ciclos**
    
    - **PMRE**: Prazo M√©dio de Renova√ß√£o dos Estoques
    - **PMRV**: Prazo M√©dio de Recebimento das Vendas
    - **PMPC**: Prazo M√©dio de Pagamento das Compras
    - **Ciclo Operacional**: PMRE + PMRV
    - **Ciclo Financeiro**: Ciclo Operacional - PMPC
    """)
    
    # Gr√°fico de ciclo financeiro
    fig = financial_analyzer.create_ciclo_financeiro()
    st.plotly_chart(fig, use_container_width=True)
    
    # Tabela com prazos
    st.subheader("üìã Prazos em Dias")
    ciclo_cols = ['Ano', 'Prazo M√©dio de Renova√ß√£o dos Estoques (PMRE) ', 
                  'Prazo M√©dio de Recebimento das Vendas (PMRV) ',
                  'Prazo M√©dio de Pagamento das Compras (PMPC) ',
                  'Ciclo Operacional e Ciclo Financeiro']
    df_ciclo = df[ciclo_cols].round(0)
    st.dataframe(df_ciclo, use_container_width=True)

def render_analise_dupont(df, financial_analyzer):
    """
    P√°gina especializada em an√°lise DuPont
    """
    st.title("üîç An√°lise DuPont - Decomposi√ß√£o da Rentabilidade")
    st.markdown("---")
    
    # Descri√ß√£o
    st.markdown("""
    ### üßÆ **An√°lise DuPont**
    
    **ROA = Margem L√≠quida √ó Giro do Ativo**
    
    **ROE = ROA √ó Multiplicador de Alavancagem Financeira**
    
    Esta an√°lise permite identificar os direcionadores da rentabilidade.
    """)
    
    # Gr√°fico DuPont
    fig = financial_analyzer.create_analise_dupont()
    st.plotly_chart(fig, use_container_width=True)
    
    # Decomposi√ß√£o atual
    st.subheader("üßÆ Decomposi√ß√£o Atual")
    ano_atual = df['Ano'].max()
    dados = df[df['Ano'] == ano_atual].iloc[0]
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("ÔøΩ Margem L√≠quida", f"{dados['Margem L√≠quida (ML)']:.1%}")
        st.metric("‚öôÔ∏è Giro do Ativo", f"{dados['Giro do Ativo (GA)']:.2f}")
    
    with col2:
        roa_calculado = dados['Margem L√≠quida (ML)'] * dados['Giro do Ativo (GA)']
        st.metric("üéØ ROA Calculado", f"{roa_calculado:.1%}")
        st.metric("üéØ ROA Real", f"{dados['Rentabilidade do Ativo (ROA ou ROI)']:.1%}")
    
    with col3:
        st.metric("‚ö° Multiplicador", f"{dados['Multiplicador de Alavancagem Financeira (MAF)']:.2f}")
        st.metric("üìà ROE", f"{dados['Rentabilidade do Patrim√¥nio L√≠quido (ROE) ']:.1%}")

def render_visao_geral(df, financial_analyzer):
    """
    P√°gina com heatmap e vis√£o geral
    """
    st.title("üå°Ô∏è Vis√£o Geral - Heatmap de Indicadores")
    st.markdown("---")
    
    # Heatmap de indicadores
    fig = financial_analyzer.create_heatmap_indicadores()
    st.plotly_chart(fig, use_container_width=True)
    
    # Tabela completa
    st.subheader("üìã Dados Completos")
    
    # Mostrar apenas colunas principais para melhor visualiza√ß√£o
    colunas_principais = [
        'Ano', 'Ativo Total', 'Receita L√≠quida', 'Lucro L√≠quido',
        'Rentabilidade do Ativo (ROA ou ROI)', 'Rentabilidade do Patrim√¥nio L√≠quido (ROE) ',
        'Liquidez Corrente (LC) ', 'Endividamento Geral (EG)', 'Margem L√≠quida (ML)'
    ]
    
    df_resumo = df[colunas_principais].round(3)
    st.dataframe(df_resumo, use_container_width=True)
    
    # Exportar dados
    if st.button("ÔøΩ Baixar Dados Completos"):
        csv = df.to_csv(index=False, sep=';', decimal=',')
        st.download_button(
            label="üíæ Download CSV",
            data=csv,
            file_name=f"analise_financeira_{datetime.now().strftime('%Y%m%d')}.csv",
            mime="text/csv"
        )
    
    # Inicializar gerenciador de gr√°ficos
    chart_manager = ChartManager()
    
    # Gr√°fico 1: Evolu√ß√£o temporal
    st.markdown("### üìà Evolu√ß√£o Temporal")
    fig1 = chart_manager.create_chart_full("evolucao_temporal", df_filtrado)
    if fig1:
        st.plotly_chart(fig1, use_container_width=True)
    else:
        st.info("Dados insuficientes para gerar gr√°fico de evolu√ß√£o temporal")
    
    # Gr√°ficos 2 e 3 lado a lado
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### üìä Top Despesas por Categoria")
        fig2 = chart_manager.create_chart_full("despesas_categoria", df_filtrado)
        if fig2:
            st.plotly_chart(fig2, use_container_width=True)
        else:
            st.info("Sem dados de despesas para exibir")
    
    with col2:
        st.markdown("### ü•ß Distribui√ß√£o de Receitas")
        fig3 = chart_manager.create_chart_full("distribuicao_receitas", df_filtrado)
        if fig3:
            st.plotly_chart(fig3, use_container_width=True)
        else:
            st.info("Sem dados de receitas para exibir")
    
    # Gr√°ficos adicionais
    col3, col4 = st.columns(2)
    
    with col3:
        st.markdown("### ü•ß Distribui√ß√£o de Despesas")
        fig4 = chart_manager.create_chart_full("distribuicao_despesas", df_filtrado)
        if fig4:
            st.plotly_chart(fig4, use_container_width=True)
        else:
            st.info("Sem dados de despesas para exibir")
    
    with col4:
        st.markdown("### üìä Saldo Mensal")
        fig5 = chart_manager.create_chart_full("comparativo_mensal", df_filtrado)
        if fig5:
            st.plotly_chart(fig5, use_container_width=True)
        else:
            st.info("Dados insuficientes para calcular saldo mensal")
    
    # Call-to-action para IA
    st.markdown("---")
    st.info("üí° **Quer an√°lises inteligentes destes gr√°ficos?** Acesse a p√°gina **'ü§ñ Chat com IA'** no menu lateral!")
    
    # Tabela de dados detalhados
    st.markdown("---")
    st.subheader("üìã Dados Detalhados")
    
    if not df_filtrado.empty:
        # Formatar a coluna de data para exibi√ß√£o
        df_exibicao = df_filtrado.copy()
        df_exibicao['Data'] = df_exibicao['Data'].dt.strftime('%d/%m/%Y')
        df_exibicao['Valor'] = df_exibicao['Valor'].apply(lambda x: f"R$ {x:,.2f}")
        
        st.dataframe(
            df_exibicao,
            use_container_width=True,
            hide_index=True
        )
        
        st.caption(f"Total de registros: {len(df_filtrado)}")
    else:
        st.info("Nenhum dado encontrado para os filtros selecionados.")

def render_ai_chat_page():
    """
    Renderiza a p√°gina de chat com IA - NOVA FUNCIONALIDADE PRINCIPAL
    """
    st.title("ü§ñ Chat com IA - An√°lise Inteligente")
    st.markdown("Converse com a IA sobre seus dados cont√°beis e obtenha insights sobre gr√°ficos espec√≠ficos")
    st.markdown("---")
    
    # Verificar se h√° dados dispon√≠veis
    if 'df_filtrado' not in st.session_state:
        st.warning("‚ö†Ô∏è **Dados n√£o dispon√≠veis!** Visite primeiro a p√°gina 'Dashboard Principal' para carregar os dados.")
        st.stop()
    
    df_filtrado = st.session_state.df_filtrado
    kpis = st.session_state.get('kpis', {})
    
    # Inicializar IA e gerenciador de gr√°ficos
    analyzer = AIAnalyzer()
    chart_manager = ChartManager()
    
    if not analyzer.is_available():
        st.error("‚ùå **API do Google Gemini n√£o configurada!**")
        st.info("""
        Para usar a an√°lise de IA:
        1. Obtenha uma API key em: https://makersuite.google.com/app/apikey
        2. Crie um arquivo `.env` na raiz do projeto
        3. Adicione: `GOOGLE_GEMINI_API_KEY=sua_chave_aqui`
        """)
        st.stop()
    
    # === SE√á√ÉO 1: SELETOR DE GR√ÅFICOS ===
    st.subheader("üìä Selecione um Gr√°fico para An√°lise")
    
    # Dropdown com gr√°ficos dispon√≠veis
    chart_options = ["üéØ An√°lise Geral dos Dados"] + chart_manager.get_available_charts()
    
    selected_chart_display = st.selectbox(
        "Escolha um gr√°fico ou an√°lise geral:",
        chart_options,
        index=0,
        help="Selecione um gr√°fico espec√≠fico para receber an√°lises focadas da IA"
    )
    
    # === SE√á√ÉO 2: PREVIEW DO GR√ÅFICO SELECIONADO ===
    selected_chart_key = None
    
    if selected_chart_display != "üéØ An√°lise Geral dos Dados":
        selected_chart_key = chart_manager.get_chart_key_from_display(selected_chart_display)
        
        if selected_chart_key:
            st.markdown("### üëÅÔ∏è Preview do Gr√°fico Selecionado")
            
            # Container para preview
            with st.container():
                col1, col2, col3 = st.columns([1, 2, 1])
                
                with col2:
                    # Criar miniatura do gr√°fico
                    thumbnail_fig = chart_manager.create_chart_thumbnail(
                        selected_chart_key, 
                        df_filtrado,
                        container_width=400,
                        container_height=250
                    )
                    
                    if thumbnail_fig:
                        st.plotly_chart(thumbnail_fig, use_container_width=True)
                        
                        # Informa√ß√µes do gr√°fico
                        chart_info = chart_manager.get_chart_info(selected_chart_key)
                        st.caption(f"üìã {chart_info.get('description', 'Gr√°fico selecionado')}")
                    else:
                        st.info("üìä Dados insuficientes para gerar este gr√°fico")
    
    st.markdown("---")
    
    # === SE√á√ÉO 3: INTERFACE DE CHAT ===
    st.subheader("üí¨ Conversa com a IA")
    
    # Inicializar hist√≥rico de chat no session_state
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []
    
    # Campo de input para pergunta
    col1, col2 = st.columns([4, 1])
    
    with col1:
        user_question = st.text_area(
            "Digite sua pergunta:",
            placeholder="Ex: Quais s√£o os principais insights deste gr√°fico? Como posso otimizar estes dados?",
            height=100,
            key="user_input"
        )
    
    with col2:
        st.markdown("<br>", unsafe_allow_html=True)
        if st.button("üöÄ **Enviar**", type="primary", use_container_width=True):
            if user_question.strip():
                # Adicionar pergunta ao hist√≥rico
                timestamp = datetime.now().strftime("%H:%M:%S")
                
                # Preparar contexto baseado na sele√ß√£o
                if selected_chart_key:
                    chart_data = chart_manager.get_chart_data_for_ai(selected_chart_key, df_filtrado)
                    chart_info = chart_manager.get_chart_info(selected_chart_key)
                    context = f"Analisando especificamente o gr√°fico: {chart_info['name']}"
                else:
                    chart_data = df_filtrado
                    context = "An√°lise geral dos dados cont√°beis"
                
                # Mostrar anima√ß√£o de carregamento
                with st.spinner(f"ü§ñ IA analisando: {context}..."):
                    # Anima√ß√£o de progresso
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    
                    for i in range(100):
                        if i < 30:
                            status_text.info("üîç Analisando sua pergunta...")
                        elif i < 60:
                            status_text.info("üìä Processando dados do gr√°fico...")
                        elif i < 85:
                            status_text.info("ü§ñ IA formulando resposta...")
                        else:
                            status_text.info("‚ú® Finalizando an√°lise...")
                        
                        progress_bar.progress(i + 1)
                        time.sleep(0.025)  # 2.5 segundos total
                    
                    # Gerar resposta da IA
                    try:
                        if selected_chart_key:
                            # An√°lise focada no gr√°fico espec√≠fico
                            ai_response = analyzer.generate_chart_insights(
                                chart_data.to_dict('records') if hasattr(chart_data, 'to_dict') else chart_data,
                                selected_chart_key,
                                custom_question=user_question
                            )
                        else:
                            # An√°lise geral
                            ai_response = analyzer.generate_insights(
                                st.session_state.df_original,
                                df_filtrado,
                                kpis,
                                custom_question=user_question
                            )
                    except Exception as e:
                        ai_response = f"‚ùå Erro ao gerar resposta: {str(e)}"
                    
                    # Limpar anima√ß√£o
                    progress_bar.empty()
                    status_text.empty()
                
                # Adicionar conversa ao hist√≥rico
                st.session_state.chat_history.append({
                    'timestamp': timestamp,
                    'user_question': user_question,
                    'ai_response': ai_response,
                    'context': context,
                    'chart_key': selected_chart_key
                })
                
                # Limpar campo de input
                st.rerun()
    
    # === SE√á√ÉO 4: HIST√ìRICO DE CONVERSAS ===
    if st.session_state.chat_history:
        st.markdown("---")
        st.subheader("üí¨ Hist√≥rico de Conversas")
        
        # Bot√£o para limpar hist√≥rico
        if st.button("üóëÔ∏è Limpar Hist√≥rico", help="Remove todas as conversas anteriores"):
            st.session_state.chat_history = []
            st.rerun()
        
        # Exibir conversas (mais recente primeiro)
        for i, chat in enumerate(reversed(st.session_state.chat_history)):
            with st.expander(f"üí¨ Conversa {len(st.session_state.chat_history) - i} - {chat['timestamp']} | {chat['context']}", expanded=(i == 0)):
                # Pergunta do usu√°rio
                st.markdown("**üë§ Sua pergunta:**")
                st.markdown(f"*{chat['user_question']}*")
                
                st.markdown("---")
                
                # Resposta da IA
                st.markdown("**ü§ñ Resposta da IA:**")
                st.markdown(chat['ai_response'])
                
                # Mostrar miniatura do gr√°fico se foi an√°lise espec√≠fica
                if chat['chart_key']:
                    st.markdown("**üìä Gr√°fico analisado:**")
                    mini_fig = chart_manager.create_chart_thumbnail(
                        chat['chart_key'], 
                        df_filtrado,
                        container_width=300,
                        container_height=200
                    )
                    if mini_fig:
                        st.plotly_chart(mini_fig, use_container_width=True)
    
    # === SE√á√ÉO 5: SUGEST√ïES DE PERGUNTAS ===
    if not st.session_state.chat_history:
        st.markdown("---")
        st.subheader("üí° Sugest√µes de Perguntas")
        
        suggestions = [
            "Quais s√£o os principais insights financeiros dos dados atuais?",
            "Como posso reduzir as despesas sem impactar a opera√ß√£o?",
            "Quais categorias de receita t√™m maior potencial de crescimento?",
            "H√° alguma tend√™ncia preocupante nos dados?",
            "Qual √© a sazonalidade dos nossos resultados?",
            "Como nossa performance se compara aos meses anteriores?"
        ]
        
        cols = st.columns(2)
        for i, suggestion in enumerate(suggestions):
            with cols[i % 2]:
                if st.button(f"‚ùì {suggestion}", key=f"suggestion_{i}", use_container_width=True):
                    st.session_state.user_input = suggestion
                    st.rerun()

def render_settings_page():
    """
    Renderiza a p√°gina de configura√ß√µes
    """
    st.title("‚öôÔ∏è Configura√ß√µes")
    st.markdown("Configure as prefer√™ncias do dashboard e da IA")
    st.markdown("---")
    
    # Se√ß√£o API do Gemini
    st.subheader("ü§ñ Configura√ß√£o da API Google Gemini")
    
    analyzer = AIAnalyzer()
    if analyzer.is_available():
        st.success("‚úÖ **API configurada corretamente!**")
        st.info("A IA est√° pronta para uso nas an√°lises do dashboard.")
    else:
        st.error("‚ùå **API n√£o configurada**")
        st.markdown("""
        **Para configurar a API:**
        1. Obtenha sua API key em: https://makersuite.google.com/app/apikey
        2. Crie um arquivo `.env` na raiz do projeto
        3. Adicione: `GOOGLE_GEMINI_API_KEY=sua_chave_aqui`
        4. Reinicie o aplicativo
        """)
    
    st.markdown("---")
    
    # Informa√ß√µes do projeto
    st.subheader("‚ÑπÔ∏è Informa√ß√µes do Projeto")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        **üìä Dashboard de An√°lise Cont√°bil**
        - Vers√£o: 2.0
        - Framework: Streamlit
        - IA: Google Gemini
        """)
    
    with col2:
        st.markdown("""
        **üöÄ Funcionalidades:**
        - An√°lises gr√°ficas interativas
        - Chat inteligente com IA
        - Filtros din√¢micos
        - M√∫ltiplas visualiza√ß√µes
        """)
    
    # Bot√£o para recarregar dados
    st.markdown("---")
    st.subheader("üîÑ Gerenciamento de Dados")
    
    if st.button("üîÑ Recarregar Dados Fict√≠cios", type="secondary"):
        st.session_state.df_original = gerar_dados_contabeis()
        st.success("‚úÖ Dados recarregados com sucesso!")
        st.rerun()
    
    # Estat√≠sticas dos dados atuais
    if 'df_original' in st.session_state:
        df = st.session_state.df_original
        st.markdown("**üìà Estat√≠sticas Atuais:**")
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Total de Registros", len(df))
        
        with col2:
            st.metric("Per√≠odo", f"{df['Data'].min().strftime('%m/%Y')} - {df['Data'].max().strftime('%m/%Y')}")
        
        with col3:
            st.metric("Categorias", len(df['Categoria'].unique()))
        
        with col4:
            receitas = len(df[df['Tipo'] == 'Receita'])
            despesas = len(df[df['Tipo'] == 'Despesa'])
            st.metric("Receitas/Despesas", f"{receitas}/{despesas}")

def render_ai_chat_page_financial(df, financial_analyzer):
    """
    P√°gina do Chat com IA especializada para dados financeiros
    """
    st.title("ü§ñ Chat com IA - An√°lise Financeira")
    st.markdown("Converse com nossa IA sobre os indicadores financeiros da empresa")
    st.markdown("---")
    
    # Layout em duas colunas principais
    col_main, col_sidebar = st.columns([2, 1])
    
    with col_sidebar:
        st.subheader("üìä An√°lises Dispon√≠veis")
        
        opcoes_analise = {
            "üìà An√°lise de Rentabilidade": "rentabilidade",
            "üõ°Ô∏è An√°lise de Liquidez": "liquidez", 
            "üè¶ Estrutura de Capital": "capital",
            "‚è±Ô∏è Ciclo Financeiro": "ciclo",
            "üîç An√°lise DuPont": "dupont",
            "üå°Ô∏è Vis√£o Geral": "geral"
        }
        
        analise_selecionada = st.selectbox(
            "Escolha o tipo de an√°lise:",
            list(opcoes_analise.keys()),
            key="analise_selector"
        )
        
        # Preview melhorado do gr√°fico
        st.markdown("### üîç Preview")
        tipo_analise = opcoes_analise[analise_selecionada]
        
        try:
            if tipo_analise == "rentabilidade":
                fig_mini = financial_analyzer.create_rentabilidade_chart()
            elif tipo_analise == "liquidez":
                fig_mini = financial_analyzer.create_liquidez_radar()
            elif tipo_analise == "capital":
                fig_mini = financial_analyzer.create_estrutura_capital()
            elif tipo_analise == "ciclo":
                fig_mini = financial_analyzer.create_ciclo_financeiro()
            elif tipo_analise == "dupont":
                fig_mini = financial_analyzer.create_analise_dupont()
            else:
                fig_mini = financial_analyzer.create_heatmap_indicadores()
            
            # Configura√ß√£o melhorada para preview
            fig_mini.update_layout(
                height=300, 
                showlegend=True,
                title="",
                margin=dict(l=10, r=10, t=20, b=10),
                font=dict(size=10)
            )
            st.plotly_chart(fig_mini, use_container_width=True, key=f"preview_{tipo_analise}")
            
        except Exception as e:
            st.info("üìä Preview do gr√°fico ser√° exibido aqui")
            
        # Sugest√µes de perguntas na sidebar
        st.markdown("### üí° Sugest√µes")
        sugestoes = [
            "Analise a evolu√ß√£o da rentabilidade",
            "Quais os riscos de liquidez?", 
            "A estrutura de capital √© adequada?",
            "Como melhorar o ciclo financeiro?",
            "Principais pontos de aten√ß√£o",
            "Compare os anos analisados"
        ]
        
        for i, sugestao in enumerate(sugestoes):
            if st.button(f"üí≠ {sugestao}", key=f"sug_{i}", use_container_width=True):
                st.session_state.pergunta_sugerida = sugestao
    
    with col_main:
        # Inicializar hist√≥rico da conversa
        if 'financial_chat_history' not in st.session_state:
            st.session_state.financial_chat_history = []
        
        # Inicializar AI Analyzer
        if 'financial_ai_analyzer' not in st.session_state:
            st.session_state.financial_ai_analyzer = AIAnalyzer()
        
        # Interface de chat melhorada
        st.subheader("üí¨ Chat com IA Financeira")
        
        # Input para nova pergunta
        pergunta_default = st.session_state.get('pergunta_sugerida', '')
        pergunta = st.text_area(
            "Fa√ßa sua pergunta sobre os dados financeiros:",
            value=pergunta_default,
            placeholder="Ex: Como est√° a evolu√ß√£o da rentabilidade? Quais s√£o os principais riscos de liquidez?",
            height=100,
            key="pergunta_input"
        )
        
        # Limpar sugest√£o ap√≥s usar
        if 'pergunta_sugerida' in st.session_state:
            del st.session_state.pergunta_sugerida
        
        # Bot√µes de a√ß√£o
        col_btn1, col_btn2, col_btn3 = st.columns([1, 1, 2])
        
        with col_btn1:
            analisar_clicked = st.button("üöÄ Analisar", type="primary", use_container_width=True)
        
        with col_btn2:
            if st.button("üóëÔ∏è Limpar Hist√≥rico", use_container_width=True):
                st.session_state.financial_chat_history = []
                st.success("üóëÔ∏è Hist√≥rico limpo!")
                st.rerun()
        
        # Processamento da pergunta
        if analisar_clicked and pergunta:
            with st.spinner("ü§ñ IA analisando os dados financeiros..."):
                try:
                    # Preparar dados para IA
                    dados_para_ia = financial_analyzer.get_data_for_ai()
                    
                    # Gerar resposta
                    resposta = st.session_state.financial_ai_analyzer.generate_chart_insights(
                        dados_para_ia,
                        f"An√°lise financeira especializada sobre {analise_selecionada.lower()}: {pergunta}"
                    )
                    
                    # Adicionar ao hist√≥rico
                    st.session_state.financial_chat_history.append((pergunta, resposta, analise_selecionada))
                    
                    st.success("‚úÖ An√°lise conclu√≠da!")
                    
                except Exception as e:
                    st.error(f"‚ùå Erro ao analisar: {str(e)}")
        
        elif analisar_clicked and not pergunta:
            st.warning("‚ö†Ô∏è Por favor, digite uma pergunta.")
        
        # Exibi√ß√£o do hist√≥rico melhorada
        if st.session_state.financial_chat_history:
            st.markdown("---")
            st.subheader("ÔøΩ Hist√≥rico da Conversa")
            
            # Exibir conversas mais recentes primeiro
            for i, (pergunta_hist, resposta_hist, analise_tipo) in enumerate(reversed(st.session_state.financial_chat_history)):
                with st.container():
                    # Header da conversa
                    st.markdown(f"""
                    <div style="
                        background-color: #f0f2f6; 
                        padding: 10px; 
                        border-radius: 10px; 
                        margin: 10px 0;
                        border-left: 4px solid #1f77b4;
                    ">
                        <strong>üí≠ Pergunta {len(st.session_state.financial_chat_history) - i}:</strong> {analise_tipo}
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # Pergunta
                    st.markdown(f"**üôã‚Äç‚ôÇÔ∏è Pergunta:** {pergunta_hist}")
                    
                    # Resposta formatada
                    st.markdown("**ü§ñ Resposta da IA:**")
                    
                    # Container para resposta com estilo
                    with st.container():
                        # Dividir resposta em par√°grafos
                        paragrafos = resposta_hist.split('\n\n')
                        
                        for paragrafo in paragrafos:
                            if paragrafo.strip():
                                # Verificar se √© um t√≠tulo (cont√©m **)
                                if '**' in paragrafo:
                                    st.markdown(paragrafo)
                                else:
                                    # Texto normal com melhor espa√ßamento
                                    st.markdown(f"""
                                    <div style="
                                        background-color: #ffffff; 
                                        padding: 15px; 
                                        border-radius: 8px; 
                                        margin: 5px 0;
                                        border: 1px solid #e0e0e0;
                                        line-height: 1.6;
                                    ">
                                        {paragrafo}
                                    </div>
                                    """, unsafe_allow_html=True)
                    
                    st.markdown("---")

# Executar a aplica√ß√£o
if __name__ == "__main__":
    main()
